service: emailProcessor

provider:
    name: aws
    runtime: nodejs6.10
    stage: dev
    profile: apofc
    region: us-east-1
    memorySize: 128
    timeout: 6
    environment:
        sqsUrl: ${env:sqsUrl}
        s3Url: ${env:s3Url}
        numOfMsgToReadFromSQS: ${env:numOfMsg}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - sqs:*
          Resource: 'arn:aws:sqs:us-east-1:338805238106:*'
        - Effect: 'Allow'
          Action:
              - 's3:*'
          Resource: '*'

custom:
    region: ${opt:region, self:provider.region}
    stage: ${opt:stage, self:provider.stage}
    prefix: AppName-${self:service}-${self:custom.stage}
    sqs: ${self:custom.prefix}-emails.fifo
    sqsdeadletter: ${self:custom.sqs}-dead-letter-queue
    s3: ${self:custom.prefix}-bucket
    globalSchedule: rate(5 minutes)
    schedulerEnabled: false

functions:
    process:
        handler: handler.process
        description: process emails from sqs and put html in s3
        events:
            # - http: get process
            - schedule:
                  name: task-US
                  description: Email processor task for US
                  rate: ${self:custom.globalSchedule}
                  enabled: ${self:custom.schedulerEnabled}
                  input:
                      countryCode: US
            - schedule:
                  name: task-GB
                  description: Email processor task for GB
                  rate: ${self:custom.globalSchedule}
                  enabled: ${self:custom.schedulerEnabled}
                  input:
                      countryCode: GB

resources:
    Resources:
        EmailsQueue:
            Type: AWS::SQS::Queue
            Properties:
                ContentBasedDeduplication: false
                DelaySeconds: 0
                FifoQueue: true
                # KmsMasterKeyId: String
                # KmsDataKeyReusePeriodSeconds: Integer
                MaximumMessageSize: 256
                MessageRetentionPeriod: 345600
                QueueName: ${self:custom.sqs}
                ReceiveMessageWaitTimeSeconds: 0
                DefaultVisibilityTimeout: 30
                RedrivePolicy:
                    deadLetterTargetArn:
                        Fn::GetAtt:
                            - EmailsDeadLetterQueue
                            - 'Arn'

        EmailsDeadLetterQueue:
            Type: AWS::SQS::Queue
            Properties:
                QueueName: ${self:custom.sqs}-dead-letter-queue
                MessageRetentionPeriod: 345600
    # ? Resources: ${file(cloudformation-resources.json)}

# plugins:
#     - serverless-offline
